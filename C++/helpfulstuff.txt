clock_t t1, t2; //<<<<<<<<<<<<<
t1 = clock();   //<<<<<<<<<<<<<


t2 = clock();
float diff = ((float)t2-(float)t1);//<<<<<<<<<<<<
float sec = diff/CLOCKS_PER_SEC;//<<<<<<<<<<<<
cout << "getData function took " << sec << "seconds to run" << endl; //<<<<<<<<<<



  time ./straw KR https://hicfiles.s3.amazonaws.com/hiseq/gm12878/in-situ/HIC001.hic 7:26733030:27694134 7:26733030:27694134 BP 25000 > stout
  time ./straw KR /Users/kiararey/Documents/GitHub/straw/C++/GSE63525_IMR90_combined_30.hic.gz  7:26733030:27694134 7:26733030:27694134 BP 25000 > stout2


//to compile

   g++ -std=c++0x -o straw main.cpp straw.cpp -lcurl -lz



//maybe for url_fopen header???



enum fcurl_type_e {
  CFTYPE_NONE=0,
  CFTYPE_FILE=1,
  CFTYPE_CURL=2
};

struct fcurl_data
{
  enum fcurl_type_e type;     /* type of handle */
  union {
    CURL *curl;
    FILE *file;
  } handle;                   /* handle */

  char *buffer;               /* buffer to store cached data*/
  size_t buffer_len;          /* currently allocated buffers length */
  size_t buffer_pos;          /* end of data in buffer*/
  int still_running;          /* Is background url fetch still in progress */
};

typedef struct fcurl_data URL_FILE;

/* exported functions */
URL_FILE *url_fopen(const char *url, const char *operation);
int url_fclose(URL_FILE *file);
int url_feof(URL_FILE *file);
size_t url_fread(void *ptr, size_t size, size_t nmemb, URL_FILE *file);
char *url_fgets(char *ptr, size_t size, URL_FILE *file);
void url_rewind(URL_FILE *file);



static size_t write_callback(char *buffer,
                             size_t size,
                             size_t nitems,
                             void *userp);
static int fill_buffer(URL_FILE *file, size_t want);
static int use_buffer(URL_FILE *file, size_t want);